
============================
How to Use 100-matrix_mul.py
============================

This test module defines a matrix 
multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` returns a new matrix 
that which represents the multiplication of ``m_a`` by ``m_b``.

The first test, check multiplication on an equal size and value
2X2 matrix i.e m_a = m_b
::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = m_a
    >>> matrix_mul(m_a, m_b)
    [[7, 10], [15, 22]]

::

Test cases with an empty matrix

::

    >>> m_a = [[1,2],[2,4]]
    >>> m_b = []
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_b can't be empty

::

    >>> m_a = []
    >>> m_b = [[1,2],[2,4]]
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::

    >>> m_a = []
    >>> m_b = []
    >>> matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Test cases with floating points

::

    >>> m_a = [[1.7, 1.8], [2.6, 7.9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    [[12.129999999999999, 24.4], [30.39, 59.45]]

::

    >>> m_a = []
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::

Testing with unequal matrices list and rows

::

    >>> m_a = [2,3]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::

    >>> m_a = [[2,3], [3, 4], [6,7]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    [[16.3, 32.5], [23.3, 46.6], [44.3, 88.9]]

::

    >>> m_a = [[2, 3, 4], [3, 4, 7], [6,7 , 9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied

::

    >>> m_a = [[2, 3, 4, 5], [3, 4, 7], [6,7 , 9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

::