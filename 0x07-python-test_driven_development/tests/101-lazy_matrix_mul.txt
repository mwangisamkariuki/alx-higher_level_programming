
============================
How to Use 100-matrix_mul.py
============================

This test module defines a matrix 
multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` returns a new matrix 
that which represents the multiplication of ``m_a`` by ``m_b``.

The first test, check multiplication on an equal size and value
2X2 matrix i.e m_a = m_b
::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = m_a
    >>> lazy_matrix_mul(m_a, m_b)
    array([[ 7, 10],
           [15, 22]])

::

Test cases with an empty matrix

::

    >>> m_a = [[1,2],[2,4]]
    >>> m_b = []
    >>> lazy_matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

::

    >>> m_a = []
    >>> m_b = [[1,2],[2,4]]
    >>> lazy_matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

::

    >>> m_a = []
    >>> m_b = []
    >>> lazy_matrix_mul(m_a, m_b)
    0.0

Test cases with floating points

::

    >>> m_a = [[1.7, 1.8], [2.6, 7.9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    array([[12.13, 24.4 ],
           [30.39, 59.45]])

::

    >>> m_a = []
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

::

Testing with unequal matrices list and rows

::

    >>> m_a = [2, 3]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    array([16.3, 32.5])

::

    >>> m_a = [[2,3], [3, 4], [6,7]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    array([[16.3, 32.5],
           [23.3, 46.6],
           [44.3, 88.9]])

::

    >>> m_a = [[2, 3, 4], [3, 4, 7], [6, 7, 9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (3,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

::

    >>> m_a = [[2, 3, 4, 5], [3, 4, 7], [6,7 , 9]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

::

Test case with non-Integers or non-floats

    >>> m_a = [[2, 3, 'a'], [3, 4, 7]]
    >>> m_b = [[4.7, 9.8], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
    
::

    >>> m_a = [[2, 3, 9], [3, 4, 7]]
    >>> m_b = [[4.7, 'x'], [2.3, 4.3]]
    >>> lazy_matrix_mul (m_a, m_b)
    Traceback (most recent call last):
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

::

    >>> print(lazy_matrix_mul([[1, "text"]], [[3, 4]]))
    Traceback (most recent call last):
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::